# VSCode DAP Virtual Disassembly Exchange - mavrica.bin

## 1. Initialize Request
VSCode -> Debugger:
{
  "seq": 1,
  "type": "request",
  "command": "initialize",
  "arguments": {
    "clientID": "vscode",
    "clientName": "Visual Studio Code",
    "adapterID": "mavrica-dap",
    "pathFormat": "path",
    "linesStartAt1": true,
    "columnsStartAt1": true,
    "supportsMemoryReferences": true,
    "supportsInvalidatedEvent": true
  }
}

## 2. Initialize Response
Debugger -> VSCode:
{
  "seq": 1,
  "type": "response",
  "request_seq": 1,
  "success": true,
  "command": "initialize",
  "body": {
    "supportsConfigurationDoneRequest": true,
    "supportsDisassembleRequest": true,
    "supportsInstructionBreakpoints": true,
    "supportsReadMemoryRequest": true,
    "supportsSteppingGranularity": true,
    "supportedChecksumAlgorithms": []
  }
}

## 3. Launch Request (mavrica.bin)
VSCode -> Debugger:
{
  "seq": 2,
  "type": "request",
  "command": "launch",
  "arguments": {
    "type": "mavrica-dap",
    "request": "launch",
    "program": "mavrica.bin",
    "stopAtEntry": true,
    "virtualDebug": true
  }
}

## 4. Launch Response
Debugger -> VSCode:
{
  "seq": 2,
  "type": "response",
  "request_seq": 2,
  "success": true,
  "command": "launch"
}

## 5. Initialized Event
Debugger -> VSCode:
{
  "seq": 3,
  "type": "event",
  "event": "initialized"
}

## 6. Configuration Done Request
VSCode -> Debugger:
{
  "seq": 3,
  "type": "request",
  "command": "configurationDone"
}

## 7. Configuration Done Response
Debugger -> VSCode:
{
  "seq": 4,
  "type": "response",
  "request_seq": 3,
  "success": true,
  "command": "configurationDone"
}

## 8. Thread Event
Debugger -> VSCode:
{
  "seq": 5,
  "type": "event",
  "event": "thread",
  "body": {
    "reason": "started",
    "threadId": 1
  }
}

## 9. Stopped Event (Entry Point)
Debugger -> VSCode:
{
  "seq": 6,
  "type": "event",
  "event": "stopped",
  "body": {
    "reason": "entry",
    "threadId": 1,
    "preserveFocusHint": false,
    "text": "Stopped at entry point",
    "allThreadsStopped": true
  }
}

## 10. Threads Request
VSCode -> Debugger:
{
  "seq": 4,
  "type": "request",
  "command": "threads"
}

## 11. Threads Response
Debugger -> VSCode:
{
  "seq": 7,
  "type": "response",
  "request_seq": 4,
  "success": true,
  "command": "threads",
  "body": {
    "threads": [
      {
        "id": 1,
        "name": "main"
      }
    ]
  }
}

## 12. Stack Trace Request
VSCode -> Debugger:
{
  "seq": 5,
  "type": "request",
  "command": "stackTrace",
  "arguments": {
    "threadId": 1,
    "startFrame": 0,
    "levels": 1
  }
}

## 13. Stack Trace Response
Debugger -> VSCode:
{
  "seq": 8,
  "type": "response",
  "request_seq": 5,
  "success": true,
  "command": "stackTrace",
  "body": {
    "stackFrames": [
      {
        "id": 1000,
        "name": "entry",
        "line": 1,
        "column": 1,
        "instructionPointerReference": "0x1000"
      }
    ],
    "totalFrames": 1
  }
}

## 14. DISASSEMBLE REQUEST
VSCode -> Debugger:
{
  "seq": 6,
  "type": "request",
  "command": "disassemble",
  "arguments": {
    "memoryReference": "0x1000",
    "offset": 0,
    "instructionCount": 10,
    "resolveSymbols": true
  }
}

## 15. DISASSEMBLE RESPONSE (Virtual Assembly)
Debugger -> VSCode:
{
  "seq": 9,
  "type": "response",
  "request_seq": 6,
  "success": true,
  "command": "disassemble",
  "body": {
    "instructions": [
      {
        "address": "0x1000",
        "instruction": "mov r0, #42",
        "instructionBytes": "2A 00"
      },
      {
        "address": "0x1002",
        "instruction": "add r1, r0, #1",
        "instructionBytes": "01 01"
      },
      {
        "address": "0x1004",
        "instruction": "cmp r1, #43",
        "instructionBytes": "2B 02"
      },
      {
        "address": "0x1006",
        "instruction": "beq end",
        "instructionBytes": "04 03"
      },
      {
        "address": "0x1008",
        "instruction": "nop",
        "instructionBytes": "00 00"
      },
      {
        "address": "0x100A",
        "instruction": "halt",
        "instructionBytes": "FF FF",
        "symbol": "end"
      }
    ]
  }
}

## 16. Set Instruction Breakpoint Request
VSCode -> Debugger:
{
  "seq": 7,
  "type": "request",
  "command": "setInstructionBreakpoints",
  "arguments": {
    "breakpoints": [
      {
        "instructionReference": "0x1004"
      }
    ]
  }
}

## 17. Set Instruction Breakpoint Response
Debugger -> VSCode:
{
  "seq": 10,
  "type": "response",
  "request_seq": 7,
  "success": true,
  "command": "setInstructionBreakpoints",
  "body": {
    "breakpoints": [
      {
        "verified": true,
        "id": 1,
        "instructionReference": "0x1004",
        "offset": 0
      }
    ]
  }
}

## 18. Continue Request
VSCode -> Debugger:
{
  "seq": 8,
  "type": "request",
  "command": "continue",
  "arguments": {
    "threadId": 1
  }
}

## 19. Continue Response
Debugger -> VSCode:
{
  "seq": 11,
  "type": "response",
  "request_seq": 8,
  "success": true,
  "command": "continue",
  "body": {
    "allThreadsContinued": true
  }
}

## 20. Stopped Event (Breakpoint Hit)
Debugger -> VSCode:
{
  "seq": 12,
  "type": "event",
  "event": "stopped",
  "body": {
    "reason": "instruction breakpoint",
    "threadId": 1,
    "preserveFocusHint": false,
    "text": "Instruction breakpoint at 0x1004",
    "allThreadsStopped": true,
    "hitBreakpointIds": [1]
  }
}

## 21. Disconnect Request
VSCode -> Debugger:
{
  "seq": 9,
  "type": "request",
  "command": "disconnect",
  "arguments": {
    "restart": false,
    "terminateDebuggee": true
  }
}

## 22. Disconnect Response
Debugger -> VSCode:
{
  "seq": 13,
  "type": "response",
  "request_seq": 9,
  "success": true,
  "command": "disconnect"
}
